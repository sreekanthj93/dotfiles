
info() {
  printf "  [ ${B}..${NC} ] $1\n"
}

warn() {
  printf "  [ ${Y}??${NC} ] $1\n"
}

success() {
  printf "  [ ${G}OK${NC} ] $1\n"
}

error() {
  printf "  [${R}ERR${NC}] $1\n"
  echo ''
}

fatal() {
  printf "  [${R}FAIL${NC}] $1\n"
  echo ''
  exit 1
}

# $1 pass a directory
sourceall() {
  for file in $1/*; do
    source $file
  done
}

# $1 file
# $2 target
create_symlink() {
  local file=$1 target=$2
  local remove= backup= skip= action=

  if [ -f "$target" -o -d "$target" -o -L "$target" ]; then
    if [ "$backup_all" != "true" -a "$remove_all" != "true" -a "$skip_all" != "true" ]; then
      local cur_target=$(readlink $target)
      if [ "$cur_target" = "$target" ]; then
        skip=true
      else
        warn "~${target#$HOME} already exists, what do you want to do?\n
        [s]kip, [S]kip all, [r]emove, [R]emove all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          b) backup=true;;
          B) backup_all=true;;
          r) remove=true;;
          R) remove_all=true;;
          s) skip=true;;
          S) skip_all=true;;
          *) ;;
        esac
      fi
    fi

    backup=${backup:-$backup_all}
    remove=${remove:-$remove_all}
    skip=${skip:-$skip_all}

    if [ "$backup" = "true" ]; then
      mv "$target" "${target}.backup"
      success "Moved $target to ${target}.backup"
    fi

    if [ "$remove" = "true" ]; then
      rm -rf "$target"
      success "Removed $dst"
    fi

    if [ "$skip" = "true" ]; then
      success "Skipping $file"
    fi
  fi

  if [ "$skip" != "true" ]; then
    info "  ${G}Creating${NC} symlink ~${target#$HOME}"
    ln -s $file $target
  fi
}

checktool() {
  if test ! $(which $1); then
    return 1
  else
    return 0
  fi
}

installclitools() {
  for pkg in ${Packages[@]}; do
    # $PackageManager install $pkg
    echo $pkg
  done
}

doGitCheckouts() {
  # echo git clone $repo $path
  IFS=' '
  for elem in "${GitRepositories[@]}"; do
    read -a tokens <<< "$elem"  # uses default whitespace IFS
    local repo=${tokens[0]} path=${tokens[1]}
    # remove ~ and replace with $HOME
    local abs_path=${path/"~"/$HOME}
    # info "  Checking out $repo at $path ($abs_path)"
    if [ -d $abs_path ]; then
      warn "  $path already exists"
    else
      git clone -q $repo $abs_path
      if [ $? -eq 0 ]; then
        success "  Checked out $repo at $path"
      else
        error "  Failed to checkout $repo at $path"
      fi
    fi
  done
  unset IFS
}
